name: CI/CD - ASP.NET + Docker + Azure

on:
  push:
    branches: [ "main" ]

env:
  AZURE_WEBAPP_NAME: webapi-adrien
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8'

jobs:
  # ðŸ”¹ Ã‰tape commune
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.publish.outputs.artifact-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build
        run: dotnet build --configuration Release

      - name: Publish
        id: publish
        run: |
          dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp
          echo "artifact-path=${{env.DOTNET_ROOT}}/myapp" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ steps.publish.outputs.artifact-path }}

  # ðŸ”¹ Tests unitaires
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Run tests
        run: dotnet test ./Tests/TestProject/TestProject.csproj --verbosity normal

  # ðŸ”¹ Build et push image Docker
  docker:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/webapi-demo2:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/webapi-demo2:latest

  # ðŸ”¹ DÃ©ploiement sur Azure Web App
  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    environment:
      name: Development
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      - name: Deploy to Azure
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # ðŸ”¹ VÃ©rification post-dÃ©ploiement
  check:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for app to start
        run: |
          echo "Checking availability of ${{ needs.deploy.outputs.webapp-url }}"
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy.outputs.webapp-url }}" | grep -q "200"; then
              echo "App is up!"
              exit 0
            fi
            echo "App not ready yet, retrying in 10s..."
            sleep 10
          done
          echo "App did not start in time" && exit 1

      - name: Verify Hello World response
        run: |
          response=$(curl -s "${{ needs.deploy.outputs.webapp-url }}")
          echo "Response: $response"
          echo "$response" | grep -q "Hello World!" || (echo "Expected 'Hello world' in response" && exit 1)
